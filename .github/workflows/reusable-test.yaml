name: Test csvcubed-models
on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      python-version:
        required: true
        type: string

jobs:
  test_in_environments:
    runs-on: ${{ inputs.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Necessary for running csvlint inside the Windows VM.
      - uses: ruby/setup-ruby@v1
        if: inputs.os == 'windows-latest'
        with:
          ruby-version: '2.4'

      - name: Install csvlint, csv2rdf and sparql-test-runner (Windows)
        id: windows-install
        if: inputs.os == 'windows-latest'

        run: .\windows-testing-setup.ps1 -verbose
        shell: pwsh

      - uses: actions/setup-python@v4
        id: install-python
        with:
          python-version: ${{ inputs.python-version }}

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install pyright
        run: npm install -g pyright@1.1.302

      - name: Install poetry
        run: pip install poetry

      - uses: actions/cache@v3
        if: inputs.os == 'ubuntu-latest' && inputs.python-version == '3.11'
        with:
          path: |
            ~/.cache/pypoetry/virtualenvs
            C:\Users\runneradmin\AppData\Local\pypoetry\Cache\virtualenvs
          key: ${{ inputs.os }}-${{ steps.install-python.outputs.python-version }}-poetry-${{ hashFiles('poetry.lock') }}

      - uses: actions/cache@v3
        if: (inputs.os == 'ubuntu-latest' && inputs.python-version == '3.9') || inputs.os == 'windows-latest'
        with:
          path: |
            ~/.cache/pypoetry/virtualenvs
            C:\Users\runneradmin\AppData\Local\pypoetry\Cache\virtualenvs
          key: ${{ inputs.os }}-${{ steps.install-python.outputs.python-version }}-poetry-${{ hashFiles('poetry.lock') }}-

      - name: Install python packages
        run: poetry install

      - name: Run pyright
        run: poetry run pyright . --lib

      - name: Run unittests
        run: poetry run pytest --junitxml=pytest_results.xml

      - name: Archive unit test results from xml files
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.os }}-python${{ inputs.python-version }} test results
          path: |
            pytest_results.xml
            reports/*.xml

  publish_test_results:
    needs: [test_in_environments]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.os }}-python${{ inputs.python-version }} test results

      - name: Remove broken characters from xml test files
        # By removing broken characters from the xml unit test files, we can then publish the tests results stored
        # in those files in a user friendly way on github actions using 'EnricoMi/publish-unit-test-result-action@v1'.
        if: always()
        run: sed -i -e "s/[\\x0A\\x1B]//g" reports/TESTS-*.xml

      - name: Publish Unit Test Results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          check_name: ${{ inputs.os }}-python${{ inputs.python-version }} test results
          junit_files: |
            reports/*.xml
            pytest_results.xml